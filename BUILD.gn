import("//webrtc.gni")

if (is_android) {
  import("//build/config/android/config.gni")
  import("//build/config/android/rules.gni")
} else if (is_mac) {
  import("//build/config/mac/rules.gni")
} else if (is_ios) {
  import("//build/config/ios/rules.gni")
}


config("config") {
  if (is_mac || is_ios) {
    cflags = [
      "-Wno-deprecated-declarations",
      "-Wno-reorder-ctor",
      "-Wno-unused-value",
      "-mmacosx-version-min=10.15",
    ]
  }

  
 
}


if (true)  {
  static_library("libwebsockets") {
    visibility = [ "*" ]
    configs += [ ":config" ]
    if (is_mac ||is_ios) {
      configs -= [ "//build/config/clang:extra_warnings" ]
    }
    configs -= [ "//build/config/compiler:no_exceptions" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/compiler:default_warnings" ]
    configs -= [ "//build/config/compiler:chromium_code" ]
    boringssl_path = rebase_path("//third_party/boringssl", root_build_dir)
    include_dirs = [
      "//third_party/boringssl/src/include",
      "include",
      "lib",
      "include",
      "plugins",
      "lib/core",
      "lib/core-net",
      "lib/event-libs",
      "include/abstract",
      "lib/tls",
      "lib/roles",
      "lib/event-libs/libuv",
      "lib/event-libs/poll",
      "lib/event-libs/libevent",
      "lib/event-libs/glib",
      "lib/event-libs/libev",
      "lib/jose/jwe",
      "lib/jose/jws",
      "lib/jose",
      "lib/misc",
      "lib/roles/http",
      "lib/roles/http/compression",
      "lib/roles/h1",
      "lib/roles/h2",
      "lib/roles/ws",
      "lib/roles/cgi",
      "lib/roles/dbus",
      "lib/roles/raw-proxy",
      "lib/abstract",
      "lib/system/async-dns",
      "lib/roles/mqtt",
      "lib/system/smd",
      "lib/system/metrics",
      ]
    if(is_win){
      include_dirs += [
            "include/plat/windows", #windows not supoort wss
            "lib/plat/windows", "win32port/win32helpers"
            ]
    }else { #if(is_linux)
      include_dirs += [
        "include/plat/unix",
        "lib/plat/unix"
        ]
    }
    if (is_mac) {
      include_dirs += [
        "platform-include/osx"
      ]
    }
    if (is_win && !is_clang) {
      cflags = [
        #"-DLWS_WITH_PEER_LIMITS",
        #"-DLWS_WITH_BORINGSSL=1",
        "-DOPENSSL_INCLUDE_DIRS="+boringssl_path,
        #"--no-sysroot-suffix",
        "-D_WIN32",
        "-DWIN32",
      ]
    }else{
      cflags = [
        "-Wno-unreachable-code",
        "-Wno-deprecated-declarations",
        "-Wno-implicit-function-declaration",
        "-Wno-nonnull",
        #"-Wno-semicolon-before-method-body",
        "-Wno-unused-variable",
        "-Wundef",
        #"-Wno-sign-compare",
        #"-std=gnu99",
        #"-Werror=sign-compare",
        #"-Wreserved-user-defined-literal",
        "-fexceptions",
        #"-DLWS_WITH_PEER_LIMITS",
        #"-DLWS_WITH_BORINGSSL=1",
        "-DOPENSSL_INCLUDE_DIRS="+boringssl_path,
        #"--no-sysroot-suffix"
      ]      
    }
    sources = [
        "lib/tls/tls.c",
        "lib/tls/tls-network.c",
        "lib/tls/tls-sessions.c",
        "lib/tls/openssl/openssl-tls.c",
        "lib/tls/openssl/openssl-x509.c",
        "lib/tls/openssl/openssl-ssl.c",
        "lib/tls/openssl/openssl-session.c",
        "lib/tls/tls-server.c",
        "lib/tls/openssl/openssl-server.c",
        "lib/tls/tls-client.c",
        "lib/tls/openssl/openssl-client.c",
        "lib/core/alloc.c",
        "lib/core/buflist.c",
        "lib/core/context.c",
        "lib/core/lws_dll2.c",
        "lib/core/lws_map.c",
        "lib/core/libwebsockets.c",
        "lib/core/logs.c",
        "lib/core/vfs.c",
        "lib/misc/base64-decode.c",
        "lib/misc/prng.c",
        "lib/misc/lws-ring.c",
        "lib/misc/cache-ttl/lws-cache-ttl.c",
        "lib/misc/cache-ttl/heap.c",
        "lib/misc/cache-ttl/file.c",
        "lib/misc/dir.c",
        "lib/misc/lwsac/lwsac.c",
        "lib/misc/lwsac/cached-file.c",
        "lib/misc/sha-1.c",
        "lib/misc/lejp.c",
        "lib/system/system.c",
        "lib/system/smd/smd.c",
        "lib/core-net/dummy-callback.c",
        "lib/core-net/output.c",
        "lib/core-net/close.c",
        "lib/core-net/network.c",
        "lib/core-net/vhost.c",
        "lib/core-net/pollfd.c",
        "lib/core-net/service.c",
        "lib/core-net/sorted-usec-list.c",
        "lib/core-net/wsi.c",
        "lib/core-net/wsi-timeout.c",
        "lib/core-net/adopt.c",
        "lib/roles/pipe/ops-pipe.c",
        "lib/core-net/state.c",
        "lib/core-net/client/client.c",
        "lib/core-net/client/connect.c",
        "lib/core-net/client/connect2.c",
        "lib/core-net/client/connect3.c",
        "lib/core-net/client/connect4.c",
        "lib/core-net/client/sort-dns.c",
        "lib/core-net/client/conmon.c",
        "lib/roles/http/header.c",
        "lib/roles/http/date.c",
        "lib/roles/http/parsers.c",
        "lib/roles/http/server/server.c",
        "lib/roles/http/server/lws-spa.c",
        "lib/roles/http/cookie.c",
        "lib/roles/http/server/lejp-conf.c",
        "lib/roles/h1/ops-h1.c",
        "lib/roles/h2/http2.c",
        "lib/roles/h2/hpack.c",
        "lib/roles/h2/ops-h2.c",
        "lib/roles/ws/ops-ws.c",
        "lib/roles/ws/client-ws.c",
        "lib/roles/ws/client-parser-ws.c",
        "lib/roles/ws/server-ws.c",
        "lib/roles/raw-skt/ops-raw-skt.c",
        "lib/roles/raw-file/ops-raw-file.c",
        "lib/roles/listen/ops-listen.c",
        "lib/roles/http/client/client-http.c",
        "lib/event-libs/poll/poll.c",
      ]
    if(is_win){
      sources += [
        "lib/plat/windows/windows-plugins.c",
        "lib/plat/windows/windows-misc.c",
        "lib/plat/windows/windows-init.c",
        "lib/plat/windows/windows-file.c",
        "lib/plat/windows/windows-pipe.c",
        "lib/plat/windows/windows-service.c",
        "lib/plat/windows/windows-sockets.c",
        "lib/plat/windows/windows-fds.c",
        "lib/plat/windows/windows-resolv.c",
        "win32port/win32helpers/getopt.c",
        "win32port/win32helpers/getopt_long.c",
        "win32port/win32helpers/gettimeofday.c",
      ]
    }else { #if(is_linux)
      sources += [      
        "lib/plat/unix/unix-caps.c",
        "lib/plat/unix/unix-misc.c",
        "lib/plat/unix/unix-init.c",
        "lib/plat/unix/unix-file.c",
        "lib/plat/unix/unix-pipe.c",
        "lib/plat/unix/unix-service.c",
        "lib/plat/unix/unix-sockets.c",
        "lib/plat/unix/unix-fds.c",
      ]
    }
    
    public_deps = [
      #"//third_party/boringssl:boringssl",
      ]

    # ldflags = [     
    #   "-lm",
    #   "-lz"
    #   ]
  }
}
